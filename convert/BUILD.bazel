# FIXME: broken build

load("@rules_cc//cc:defs.bzl", "cc_binary")

exports_files(["convert.c"]) # for makeheaders

##########
cc_binary(
    name  = "convertBORKED",
    linkstatic = True,
    srcs  = [
        "convert.c",
        "//src/hdrs:convert.h",
        # "//src:log.c",
        # "//src:log.h",
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }) + select({
        "//bzl/host:linux": ["_XOPEN_SOURCE=500"], # strdup
        "//conditions:default":   []
    }) + [
        "WITH_C_LOADER"
    ],
    copts = select({
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-Wall",
        "-Wpedantic",
        "-Wno-unused-function",

        "-I$(GENDIR)/src/hdrs",               # convert.h (local)
        "-I$(GENDIR)/external/mibl/src/hdrs", # convert.h

        "-I$(GENDIR)/src",                   # mibl.h (local)
        "-I$(GENDIR)/external/mibl/src",     # mibl.h

        "-Ivendored/libinih",
        "-Iexternal/mibl/vendored/libinih",

        "-Ivendored/logc",
        "-Iexternal/mibl/vendored/logc",

        "-Ivendored/uthash",
        "-Iexternal/mibl/vendored/uthash",

        "-Iexternal/libs7/src",
    ],
    linkopts = select({
        "//bzl/host:macos": [],
        "//bzl/host:linux": [ "-Wl,-E", "-ldl"],
        "//conditions:default": {}
    }) + [
        "-lm",
        # "-lc_s7"
    ],
    data = [
        "//mibl:srcs",
        "//mibl/dune:srcs",
        "//mibl/meta:srcs",
        "//mibl/opam:srcs",
    ],
    deps = [
        "//src:treewalker_project",
        "//vendored/logc",
        "//vendored/uthash"
        # "//src:mibl",
        # "//external/libinih:inih",
        # "@libs7//src:s7",
        # "@libs7//src:c_s7",
        # "@libs7//vendored/linenoise",
    ],
    visibility = ["//visibility:public"]
)

########
# genrule(
#     name = "mkhdrs",
#     srcs = [
#         "convert.c",
#     ],
#     outs = [
#         "convert.h",
#     ],
#     cmd = "\n".join([
#         "SRC1=$(location convert.c)",
#         "SRCDIR1=`dirname $$SRC1`",
#         "$(location @makeheaders//:makeheaders) \\",
#         "    $(location convert.c);",
#         "cp $${SRCDIR1}/*.h $(@D)",
#     ]),
#     tools = ["@makeheaders//:makeheaders"],
#     visibility = ["//visibility:public"]
# )
