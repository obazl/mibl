((:@ (:name . "@")
     (:path . /Users/gar/obazl/mibl/test/dune/deps/dynamic/case01)
     (:exports
         (hash-table
           ':dynsig2.mli ((:pkg . ./) (:tgt . :dynsig2.mli)))) (:opam (hash-table))
     (:shared-ppx
         (hash-table)) (:filegroups (hash-table))
     (:pkgs
         (hash-table
           '"./" ((:ws-path . "/Users/gar/obazl/mibl/test/dune/deps/dynamic/case01") (:pkg-path . "./")
                   (:realpath . "/Users/gar/obazl/mibl/test/dune/deps/dynamic/case01")
                   (:files (:static "BUILD.expected" "WORKSPACE"))
                   (dune (rule (target dynsig2.mli)
                               (action
                                (write-file dynsig2.mli "val dynsig2_msg: string"))))
                   (dune-project (lang dune 3.0))
                   (:modules (Foo (:ml . foo.ml) (:mli . foo.mli)))
                   (:signatures (:static (Goodbye . goodbye.mli) (Staticsig . staticsig.mli))
                                (:dynamic (Dynsig2 . dynsig2.mli) (Dynsig2 . dynsig2.mli)))
                   (:structures (:static (Hello . hello.ml) (Mytest mytest.ml (:here . Hello))))
                   (:opam "mwe.opam")
                   (:mibl (:rule (::tools (:write-file . :unresolved))
                                 (::outputs (:dynsig2.mli (:pkg . "./") (:tgt . "dynsig2.mli")))
                                 (:cmd (:tool :write-file)
                                       (:args :dynsig2.mli (:content "val dynsig2_msg: string"))))
                          (:rulex (::outputs (:dynsig2.mli (:pkg . ./) (:tgt . :dynsig2.mli)))
                                  (::tools :DUMMY2)
                                  (:cmd (:tool :write-file)
                                        (:args dynsig2.mli "val dynsig2_msg: string")))))))))