((:@ (:name . "@")
     (:path . /Users/gar/obazl/mibl/test/dune/deps/glob/sub/untagged/case01)
     (:exports
         (hash-table)) (:opam (hash-table)) (:shared-ppx (hash-table))
     (:filegroups
         (hash-table
           '"bar" (("glob_STAR.js" (:pkg "bar") (:glob . "*.js") (:clients "./")))
           '"foo" (("glob_STAR.js" (:pkg "foo") (:glob . "*.js") (:clients "./")))))
     (:pkgs
         (hash-table
           '"bar" ((:ws-path . "/Users/gar/obazl/mibl/test/dune/deps/glob/sub/untagged/case01") (:pkg-path . "bar")
                    (:realpath . "/Users/gar/obazl/mibl/test/dune/deps/glob/sub/untagged/case01/bar")
                    (:files (:static "bara.js" "barb.js"))
                    (:filegroups ("glob_STAR.js" (:pkg "bar") (:glob . "*.js") (:clients "./"))))
           '"foo" ((:ws-path . "/Users/gar/obazl/mibl/test/dune/deps/glob/sub/untagged/case01") (:pkg-path . "foo")
                    (:realpath . "/Users/gar/obazl/mibl/test/dune/deps/glob/sub/untagged/case01/foo")
                    (:files (:static "fooa.js"))
                    (:filegroups ("glob_STAR.js" (:pkg "foo") (:glob . "*.js") (:clients "./"))))
           '"./" ((:ws-path . "/Users/gar/obazl/mibl/test/dune/deps/glob/sub/untagged/case01") (:pkg-path . "./")
                   (:realpath . "/Users/gar/obazl/mibl/test/dune/deps/glob/sub/untagged/case01")
                   (dune (rule (target files.ml)
                               (deps (glob_files bar/*.js) (glob_files foo/*.js))
                               (action (with-stdout-to %{target} (cat %{deps} %{target})))))
                   (:mibl (:rule (::inputs (:glob_STAR.js (:pkg . "bar") (:glob . "glob_STAR.js"))
                                           (:glob_STAR.js (:pkg . "foo") (:glob . "glob_STAR.js")))
                                 (::tools (:cat . :shell-tool))
                                 (::outputs (:files.ml (:pkg . "./") (:tgt . "files.ml")))
                                 (:cmd (:tool :cat) (:args :deps ::outputs)) (:stdout ::outputs)
                                 (:cmdx (:stdout ::outputs)
                                        (:cmd (:tool . :cat) (:shell . #<unspecified>)
                                              (:args ::inputs ::outputs)))))
                   (:structures (:dynamic (Files . files.ml))))))))