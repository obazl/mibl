((:@ (:name . "@")
     (:path . /home/gar_mobileink_com/obazl/mibl/test/dune/deps/glob/sub/case01)
     (:exports
         (hash-table)) (:opam (hash-table)) (:shared-ppx (hash-table))
     (:filegroups
         (hash-table
           '"css" (("glob_STAR.css" (:pkg "css") (:glob . "*.css") (:clients "./" "./")))))
     (:pkgs
         (hash-table
           '"css" ((:ws-path . "/home/gar_mobileink_com/obazl/mibl/test/dune/deps/glob/sub/case01") (:pkg-path . "css")
                    (:realpath . "/home/gar_mobileink_com/obazl/mibl/test/dune/deps/glob/sub/case01/css")
                    (:files (:static "main.css"))
                    (:filegroups ("glob_STAR.css" (:pkg "css") (:glob . "*.css")
                                                  (:clients "./" "./"))))
           '"./" ((:ws-path . "/home/gar_mobileink_com/obazl/mibl/test/dune/deps/glob/sub/case01") (:pkg-path . "./")
                   (:realpath . "/home/gar_mobileink_com/obazl/mibl/test/dune/deps/glob/sub/case01")
                   (:files (:static "concat.sh"))
                   (dune (rule (targets foo.ml)
                               (deps (:< concat.sh) (:css (glob_files css/*.css)))
                               (action (run %{<} %{css} %{targets}))))
                   (:mibl (:rule (::inputs (:< (:pkg . "./") (:tgt . "concat.sh"))
                                           (:css (:pkg . "css") (:glob . "glob_STAR.css")))
                                 (::tools :DUMMY5)
                                 (::outputs (:foo.ml (:pkg . "./") (:tgt . "foo.ml")))
                                 (:cmd (:cmd (:tool (% . <)) (:args (% . css) ::outputs))))
                          (:rulex (::inputs (:< (:pkg . "./") (:tgt . "concat.sh"))
                                            (:css (:pkg . "css") (:glob . "glob_STAR.css")))
                                  (::outputs (:foo.ml (:pkg . "./") (:tgt . "foo.ml")))
                                  (::tools :DUMMY2)
                                  (:cmd (:tool (% . <)) (:args (% . css) ::outputs))))
                   (:structures (:dynamic (Foo . foo.ml) (Foo . foo.ml))))))))