((:@ (:name . "@")
     (:path . /Users/gar/obazl/mibl/test/s7/deps/glob) (:exports (hash-table))
     (:opam
         (hash-table)) (:shared-ppx (hash-table))
     (:filegroups
         (hash-table
           '"mixed/css" (("glob_STAR.css" (:glob . "*.css") (:clients "mixed/super")))
           '"cwd" (("glob_STAR.css" (:glob . "*.css") (:clients "cwd")))
           '"css" (("glob_STAR.css" (:glob . "*.css") (:clients "super")))
           '"mixed/sub/html" (("glob_STAR.html" (:glob . "*.html") (:clients "mixed/sub")))
           '"mixed/sub/css" (("glob_STAR.css" (:glob . "*.css") (:clients "mixed/sub")))
           '"mixed/cwd" (("glob_STAR.html" (:glob . "*.html") (:clients "mixed/cwd")) ("glob_STAR.css" (:glob . "*.css") (:clients "mixed/cwd")))
           '"sub/css" (("glob_STAR.css" (:glob . "*.css") (:clients "sub")))
           '"mixed/html" (("glob_STAR.html" (:glob . "*.html") (:clients "mixed/super")))
           '"../runtime" (("glob_STAR.js" (:glob . "*.js") (:clients "genjs")))))
     (:pkgs
         (hash-table
           '"mixed/css" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "mixed/css")
                          (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/mixed/css")
                          (:files (:static "test.css"))
                          (:filegroups ("glob_STAR.css" (:glob . "*.css") (:clients "mixed/super"))))
           '"css" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "css")
                    (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/css")
                    (:files (:static "a.css" "b.css"))
                    (:filegroups ("glob_STAR.css" (:glob . "*.css") (:clients "super"))))
           '"cwd" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "cwd")
                    (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/cwd")
                    (:files (:static "a.css" "b.css" "concat.sh") (:dynamic "foo.css"))
                    (dune (rule (targets foo.css)
                                (deps concat.sh (:css (glob_files *.css)))
                                (action (run concat.sh %{css} %{targets}))))
                    (:mibl (:rule (:deps (::tools
                                          (:concat.sh (:pkg . "cwd") (:tgt . "concat.sh")))
                                         (:css (:pkg . "cwd") (:glob . "glob_STAR.css")))
                                  (:outputs (:foo.css (:pkg . "cwd") (:tgt . "foo.css")))
                                  (:actions (:cmd (:tool :concat.sh) (:args :css :outputs)))))
                    (:filegroups ("glob_STAR.css" (:glob . "*.css") (:clients "cwd"))))
           '"genjs" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "genjs")
                      (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/genjs")
                      (dune (rule (target files.ml)
                                  (deps gen/gen.exe (glob_files ../../runtime/*.js))
                                  (action (with-stdout-to %{target} (run %{deps})))))
                      (:mibl (:rule (:deps (:gen/gen.exe (:pkg . "genjs/gen") (:tgt . "gen.exe"))
                                           (::glob (:pkg . "../runtime") (:glob . "glob_STAR.js")))
                                    (:outputs (:files.ml (:pkg . "genjs") (:tgt . "files.ml")))
                                    (:actions (:cmd (:tool :gen/gen.exe) (:args ::glob))
                                              (:stdout :%{target}))))
                      (:structures (:dynamic (Files . files.ml))))
           '"mixed" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "mixed")
                      (:realpath
                       "/Users/gar/obazl/mibl/test/s7/deps/glob/mixed"))
           '"./" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "./")
                   (:realpath
                    "/Users/gar/obazl/mibl/test/s7/deps/glob"))
           '"mixed/sub/html" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "mixed/sub/html")
                               (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/mixed/sub/html")
                               (:files (:static "index.html" "main.html"))
                               (:filegroups ("glob_STAR.html" (:glob . "*.html")
                                                              (:clients "mixed/sub"))))
           '"mixed/sub/css" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "mixed/sub/css")
                              (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/mixed/sub/css")
                              (:files (:static "foo.css" "style.css"))
                              (:filegroups ("glob_STAR.css" (:glob . "*.css")
                                                            (:clients "mixed/sub"))))
           '"mixed/sub" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "mixed/sub")
                          (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/mixed/sub")
                          (:files (:static "concat.sh"))
                          (dune (rule (targets foo.ml)
                                      (deps concat.sh (:html (glob_files html/*.html))
                                            (:css (glob_files css/*.css)))
                                      (action (run concat.sh %{html} %{css} %{targets}))))
                          (:mibl (:rule (:deps (::tools (:concat.sh (:pkg . "mixed/sub")
                                                                    (:tgt . "concat.sh")))
                                               (:html (:pkg . "mixed/sub/html")
                                                      (:glob . "glob_STAR.html"))
                                               (:css (:pkg . "mixed/sub/css")
                                                     (:glob . "glob_STAR.css")))
                                        (:outputs (:foo.ml (:pkg . "mixed/sub") (:tgt . "foo.ml")))
                                        (:actions (:cmd (:tool :concat.sh)
                                                        (:args :html :css :outputs)))))
                          (:structures (:dynamic (Foo . foo.ml))))
           '"mixed/cwd" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "mixed/cwd")
                          (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/mixed/cwd")
                          (:files (:static "concat.sh" "cwd.css" "cwd.html")
                                  (:dynamic "output.txt"))
                          (dune (rule (targets output.txt)
                                      (deps concat.sh (:html (glob_files *.html))
                                            (:css (glob_files *.css)))
                                      (action (run concat.sh %{html} %{css} %{targets}))))
                          (:mibl (:rule (:deps (::tools (:concat.sh (:pkg . "mixed/cwd")
                                                                    (:tgt . "concat.sh")))
                                               (:html (:pkg . "mixed/cwd")
                                                      (:glob . "glob_STAR.html"))
                                               (:css (:pkg . "mixed/cwd")
                                                     (:glob . "glob_STAR.css")))
                                        (:outputs (:output.txt (:pkg . "mixed/cwd")
                                                               (:tgt . "output.txt")))
                                        (:actions (:cmd (:tool :concat.sh)
                                                        (:args :html :css :outputs)))))
                          (:filegroups ("glob_STAR.html" (:glob . "*.html") (:clients "mixed/cwd"))
                                       ("glob_STAR.css" (:glob . "*.css") (:clients "mixed/cwd"))))
           '"super" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "super")
                      (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/super")
                      (:files (:static "concat.sh") (:dynamic "output.css"))
                      (dune (rule (targets output.css)
                                  (deps (:< concat.sh) (:css (glob_files ../css/*.css)))
                                  (action (run %{<} %{css} %{targets}))))
                      (:mibl (:rule (:deps (::tools
                                            (:< (:pkg . "super") (:tgt . "concat.sh")))
                                           (:css (:pkg . "css") (:glob . "glob_STAR.css")))
                                    (:outputs (:output.css (:pkg . "super") (:tgt . "output.css")))
                                    (:actions (:cmd (:tool :<) (:args :css :outputs))))))
           '"sub/css" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "sub/css")
                        (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/sub/css")
                        (:files (:static "main.css"))
                        (:filegroups ("glob_STAR.css" (:glob . "*.css") (:clients "sub"))))
           '"sub" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "sub")
                    (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/sub")
                    (:files (:static "concat.sh"))
                    (dune (rule (targets foo.ml)
                                (deps (:< concat.sh) (:css (glob_files css/*.css)))
                                (action (run %{<} %{css} %{targets}))))
                    (:mibl (:rule (:deps (::tools (:< (:pkg . "sub") (:tgt . "concat.sh")))
                                         (:css (:pkg . "sub/css") (:glob . "glob_STAR.css")))
                                  (:outputs (:foo.ml (:pkg . "sub") (:tgt . "foo.ml")))
                                  (:actions (:cmd (:tool :<) (:args :css :outputs)))))
                    (:structures (:dynamic (Foo . foo.ml))))
           '"genjs/gen" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "genjs/gen")
                          (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/genjs/gen")
                          (dune (executable (name gen) (libraries js_of_ocaml-compiler)))
                          (:structures (:static (Gen gen.ml)))
                          (:mibl (:executable (:privname . gen) (:main . Gen) (name gen)
                                              (libraries js_of_ocaml-compiler) (modules :standard)
                                              (:deps (:resolved @js_of_ocaml-compiler//lib/js_of_ocaml-compiler)))))
           '"mixed/html" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "mixed/html")
                           (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/mixed/html")
                           (:files (:static "test.html"))
                           (:filegroups ("glob_STAR.html" (:glob . "*.html")
                                                          (:clients "mixed/super"))))
           '"../runtime" ((:ws-path /Users/gar/obazl/mibl/test/s7/deps/glob) (:pkg-path "../runtime")
                           (:realpath "/Users/gar/obazl/mibl/test/s7/deps/runtime")
                           (:filegroups ("glob_STAR.js" (:glob . "*.js") (:clients "genjs"))))
           '"mixed/super" ((:ws-path "/Users/gar/obazl/mibl/test/s7/deps/glob") (:pkg-path "mixed/super")
                            (:realpath "/Users/gar/obazl/mibl/test/s7/deps/glob/mixed/super")
                            (:files (:static "concat.sh"))
                            (dune (rule (targets foo.ml)
                                        (deps concat.sh (:html (glob_files ../html/*.html))
                                              (:css (glob_files ../css/*.css)))
                                        (action (run concat.sh %{html} %{css} %{targets}))))
                            (:mibl (:rule (:deps (::tools (:concat.sh (:pkg . "mixed/super")
                                                                      (:tgt . "concat.sh")))
                                                 (:html (:pkg . "mixed/html")
                                                        (:glob . "glob_STAR.html"))
                                                 (:css (:pkg . "mixed/css")
                                                       (:glob . "glob_STAR.css")))
                                          (:outputs (:foo.ml (:pkg . "mixed/super")
                                                             (:tgt . "foo.ml")))
                                          (:actions (:cmd (:tool :concat.sh)
                                                          (:args :html :css :outputs)))))
                            (:structures (:dynamic (Foo . foo.ml))))))))