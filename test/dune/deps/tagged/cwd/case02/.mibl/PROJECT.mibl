((:@ (:name . "@")
     (:path . /Users/gar/obazl/mibl/test/dune/deps/tagged/cwd/case02)
     (:exports
         (hash-table)) (:opam (hash-table)) (:shared-ppx (hash-table))
     (:filegroups
         (hash-table))
     (:pkgs
         (hash-table
           '"./" ((:ws-path . "/Users/gar/obazl/mibl/test/dune/deps/tagged/cwd/case02") (:pkg-path . "./")
                   (:realpath . "/Users/gar/obazl/mibl/test/dune/deps/tagged/cwd/case02")
                   (dune (rule (targets output.ml)
                               (deps (:hello hello.txt) (:world world.txt))
                               (action (with-stdout-to %{targets} (cat %{hello} %{world})))))
                   (:files (:static "hello.txt" "world.txt"))
                   (:mibl (:rule (::inputs (:hello (:pkg . "./") (:tgt . "hello.txt"))
                                           (:world (:pkg . "./") (:tgt . "world.txt")))
                                 (::tools (:cat . :shell-tool))
                                 (::outputs (:output.ml (:pkg . "./") (:tgt . "output.ml")))
                                 (:cmd (:tool :cat) (:args :hello :world)) (:stdout ::outputs))
                          (:rulex (::inputs (:hello (:pkg . "./") (:tgt . "hello.txt"))
                                            (:world (:pkg . "./") (:tgt . "world.txt")))
                                  (::outputs (:output.ml (:pkg . "./") (:tgt . "output.ml")))
                                  (::tools :DUMMY2) (:stdout ::outputs)
                                  (:cmd (:tool . :cat) (:shell . #<unspecified>)
                                        (:args (% . hello) (% . world)))))
                   (:structures (:dynamic (Output . output.ml) (Output . output.ml))))))))