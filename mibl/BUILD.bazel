exports_files(["mibl.c", "run_mibl.sh"])

load("@makeheaders//rules:makeheaders.bzl", "makeheaders")

# load("//:BUILD.bzl",
#      "GOPT_VERSION",
#      "INIH_VERSION",
#      "LIBLOGC_VERSION",
#      "LIBS7_VERSION",
#      "MIBL_VERSION",
#      "UTHASH_VERSION")

load("//config/cc:BUILD.bzl",
     "BASE_SRCS", "BASE_DEPS", "BASE_INCLUDE_PATHS",
     "BASE_COPTS", "BASE_DEFINES", "BASE_LINKOPTS")

## macros:
load(":BUILD.bzl", "mibl")

SRCS          = BASE_SRCS
INCLUDE_PATHS = BASE_INCLUDE_PATHS
COPTS         = BASE_COPTS + INCLUDE_PATHS
DEPS          = BASE_DEPS
DEFINES       = BASE_DEFINES
LINKOPTS      = BASE_LINKOPTS

# produce executable mibl w/lib libmibl.a
# mibl(name = "mibl")

# script(name = "report")
# script(name = "convert", main = "mibl_main.scm")

cc_binary(
    name  = "mibl",
    # args  = _args,
    linkstatic = True,
    srcs  = SRCS + [
        "mibl_main.c", ":mkhdrs"
    ],
    deps = DEPS + [
        "//lib:mibl",           # libmibl

        "@gopt//lib:gopt",
        "@uthash//lib:uthash",
        # "@inih//:inih",
    ],
    copts = COPTS + [
        "-I$(GENDIR)/mibl",               # mibl.h
        "-I$(GENDIR)/external/{}/mibl".format( # mibl.h
            repository_name()[1:]
        ),
        # "-I$(GENDIR)/external/mibl~{}/mibl".format(MIBL_VERSION),
        # "-I$(GENDIR)/external/mibl/mibl",

        # "-Iexternal/mibl~{}/config".format(MIBL_VERSION),

        "-I$(GENDIR)/src/hdrs",                # mibl.h
        # "-I$(GENDIR)/external/mibl~{}/src/hdrs".format(MIBL_VERSION),
        # "-I$(GENDIR)/external/mibl/src/hdrs",

        "-Ivendored/gopt",
        # "-Iexternal/gopt~{}".format(GOPT_VERSION),
        # "-Iexternal/mibl/vendored/gopt",

        # "-Iexternal/inih~{}".format(INIH_VERSION),
        # "-Ivendored/libinih",
        # "-Iexternal/mibl/vendored/libinih",

        # "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),

        # "-Iexternal/libs7~{}/src".format(LIBS7_VERSION),
        # "-Iexternal/libs7/src", # loaded by @mibl//lib:mibl

        ## repl
        "-Iexternal/libs7/vendored/linenoise",
        "-Iexternal/mibl/libs7/vendored/linenoise",
    ],
    local_defines = DEFINES,
    # local_defines = select({
    #     "//config/debug:debug?": ["DEVBUILD"],
    #     "//conditions:default":   []
    # }) + select({
    #     "//config/debug:trace?": ["TRACING"],
    #     "//conditions:default":   []
    # }) + select({
    #     "//bzl/host:linux": ["_XOPEN_SOURCE=500"], # strdup
    #     "//conditions:default":   []
    # }) + [
    #     # "WITH_C_LOADER"
    #     ],
    linkopts = LINKOPTS,
    # select({
    #     "//bzl/host:macos": [],
    #     "//bzl/host:linux": ["-ldl", "-lm"],
    #     "//conditions:default": {}
    # }),
    data = [
        "//scm:srcs",
        "//scm/dune:srcs",
        "//scm/findlib:srcs",
        "//scm/opam:srcs",
    ],
    visibility = ["//visibility:public"]
)

################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = ["mibl_main.c"]
)

# genrule(
#     name = "mkhdrs",
#     srcs = ["//mibl:mibl_main.c"], # "//mibl:xen_repl.c"],
#     outs = ["mibl_main.h"],# "//mibl:xen_repl.h"],
#     cmd = "\n".join([
#         "SRC1=$(location //mibl:mibl_main.c)",
#         "SRCDIR1=`dirname $$SRC1`",
#         "$(execpath @makeheaders//lib:makeheaders) \\",
#         "    $(location //mibl:mibl_main.c);",
#         # "    $(location //mibl:xen_repl.c);",
#         "cp $${SRCDIR1}/*.h $(@D)",
#     ]),
#     tools = ["@makeheaders//lib:makeheaders"],
#     visibility = ["//visibility:public"]
# )
