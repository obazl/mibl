exports_files(["mibl.c", "run_mibl.sh"])

load("//:BUILD.bzl",
     "BASE_SRCS", "BASE_DEPS", "BASE_INCLUDE_PATHS",
     "BASE_COPTS", "BASE_DEFINES", "BASE_LINKOPTS",
     "GOPT_VERSION",
     "LIBLOG_CC_VERSION",
     "LIBS7_VERSION",
     "MIBL_VERSION",
     "UTHASH_VERSION")

## macros:
load(":BUILD.bzl", "mibl")

SRCS          = BASE_SRCS
INCLUDE_PATHS = BASE_INCLUDE_PATHS
COPTS         = BASE_COPTS + INCLUDE_PATHS
DEPS          = BASE_DEPS
DEFINES       = BASE_DEFINES
LINKOPTS      = BASE_LINKOPTS

# produce executable mibl w/lib libmibl.a
# mibl(name = "mibl")

# script(name = "report")
# script(name = "convert", main = "mibl_main.scm")

cc_binary(
    name  = "mibl",
    # args  = _args,
    linkstatic = True,
    srcs  = SRCS + [
        "//mibl:mibl.c", "//mibl:mibl.h",
    ],
    deps = DEPS + [
        "@mibl//src:mibl",
        "@mibl//vendored/libinih:inih",
        "@gopt//:gopt",
        "@uthash//src:uthash",
    ],
    copts = COPTS + [
        "-I$(GENDIR)/mibl",               # mibl.h
        "-I$(GENDIR)/external/mibl~{}/mibl".format(MIBL_VERSION),
        # "-I$(GENDIR)/external/mibl/mibl",

        "-Iexternal/mibl~{}/config".format(MIBL_VERSION),

        "-I$(GENDIR)/src/hdrs",                # libmibl.h
        "-I$(GENDIR)/external/mibl~{}/src/hdrs".format(MIBL_VERSION),
        # "-I$(GENDIR)/external/mibl/src/hdrs",

        "-Ivendored/gopt",
        "-Iexternal/gopt~{}".format(GOPT_VERSION),
        # "-Iexternal/mibl/vendored/gopt",

        "-Ivendored/libinih",
        "-Iexternal/mibl~{}/vendored/libinih".format(MIBL_VERSION),
        # "-Iexternal/mibl/vendored/libinih",

        "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),

        "-Iexternal/libs7~{}/src".format(LIBS7_VERSION),
        # "-Iexternal/libs7/src", # loaded by @mibl//src:mibl

        ## repl
        "-Iexternal/libs7/vendored/linenoise",
        "-Iexternal/mibl/libs7/vendored/linenoise",
    ],
    local_defines = DEFINES,
    # local_defines = select({
    #     "//config/debug:debug?": ["DEVBUILD"],
    #     "//conditions:default":   []
    # }) + select({
    #     "//config/debug:trace?": ["TRACING"],
    #     "//conditions:default":   []
    # }) + select({
    #     "//bzl/host:linux": ["_XOPEN_SOURCE=500"], # strdup
    #     "//conditions:default":   []
    # }) + [
    #     # "WITH_C_LOADER"
    #     ],
    linkopts = LINKOPTS,
    # select({
    #     "//bzl/host:macos": [],
    #     "//bzl/host:linux": ["-ldl", "-lm"],
    #     "//conditions:default": {}
    # }),
    data = [
        "//scm:srcs",
        "//scm/dune:srcs",
        "//scm/findlib:srcs",
        "//scm/opam:srcs",
    ],
    visibility = ["//visibility:public"]
)

################
genrule(
    name = "mkhdrs",
    srcs = ["//mibl:mibl.c"], # "//mibl:xen_repl.c"],
    outs = ["mibl.h"],# "//mibl:xen_repl.h"],
    cmd = "\n".join([
        "SRC1=$(location //mibl:mibl.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(execpath @makeheaders//src:makeheaders) \\",
        "    $(location //mibl:mibl.c);",
        # "    $(location //mibl:xen_repl.c);",
        "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = ["@makeheaders//src:makeheaders"],
    visibility = ["//visibility:public"]
)
