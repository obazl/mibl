# load("//vendored/makeheaders:BUILD.bzl", "makeheaders")

# makeheaders(
#     name = "xhdrs",
#     srcs = [
#         "//src:mkhdrs_srcs",
#         "//src/findlib:mkhdrs_srcs",
#     ],
#     xsrcs = [
#         "//src:mkhdrs_xsrcs",
#         "//src/linux:mkhdrs_srcs"
#     ],
#     #     "//src:log.c",
#     #     "//src:log.h",
#     #     "//src:utarray.c",
#     #     "//src:utarray.h",
#     # ],
#     hdrs = [
#         "//src:mkhdrs_hdrs"
#         # "//src:ansi_colors.h",
#         # "//src:uthash.h",
#         # "//src:utstring.h",
#     ]
# )

########
DIRLOCS = [
    "SRC0=$(location //coswitch:coswitch.c);",
    "SRCDIR0=`dirname $$SRC0`;",
    "SRC1=$(location //src:ansi_colors.h);",
    "SRCDIR1=`dirname $$SRC1`;",
    "SRC2=$(location //src/dune:dune_readers.c);",
    "SRCDIR2=`dirname $$SRC2`;",
    "SRC3=$(location //src/findlib:meta_packages.c);",
    "SRCDIR3=`dirname $$SRC3`;",
    ## meta_syntaxis.c is generated so needs special treatment
    "SRC4=$(location //src/findlib:meta_syntaxis.c);",
    "SRCDIR4=`dirname $$SRC4`;",
    # "SRC5=$(location //convert:convert.c);",
    # "SRCDIR5=`dirname $$SRC5`;",
    "SRC6=$(location //src/xdg:xdg.c);",
    "SRCDIR6=`dirname $$SRC6`;",
    "SRC7=$(location //src/opam:opam_lexer.c);",
    "SRCDIR7=`dirname $$SRC7`;",
    ## opam_syntaxis.c generated
    "SRC8=$(location //src/opam:opam_syntaxis.c);",
    "SRCDIR8=`dirname $$SRC8`;",
    "SRC9=$(location //src/coswitch:opam_switch_converter.c);",
    "SRCDIR9=`dirname $$SRC9`;",
]

# We need to enumerate rather than use $(SRCS) or a wildcard
# since for for a few srcfiles we do not want to emit a hdr;
# for those we use the suffixed colon notation e.g. 'foo.c:'.
FILELOCS = [
    "$(location //vendored/makeheaders)",
    "$(location //src:ansi_colors.h)",
    "$(location //src:globals.c)",
    "$(location //src:config_bazel.c)",
    "$(location //src:config_mibl.c)",
    "$(location //src:mibl_s7.c)",
    "$(location //src:config_opam.c)",
    # "$(location //src:config_s7.c)",
    "$(location //src:config_s7.c)",

    "$(location //src:deps.c)",
    "$(location //src:cmd_runner.c)",

    "$(location //src:error_handler_opam.c)",
    "$(location //src:error_handler_dune.c)",
    "$(location //src:handlers.c)",
    "$(location //src:handlers_opam.c)",

    "$(location //src:load_project.c)",

    "$(location //src/coswitch:coswitch_cleaner.c)",
    "$(location //src/coswitch:opam_switch_converter.c)",
    "$(location //src:treewalker_project.c)",
    "$(location //src:utils.c)",

    # "$(location //src:log.c):", # do not emit header
    # "$(location //src:log.h)",
    # "$(location //src:utarray.c):",  # do not emit header
    # "$(location //src:utarray.h)",
    # "$(location //src:uthash.h)",
    # "$(location //src:utstring.c)",

    "$(location //src/dune:dune_readers.c)",

    "$(location //src/findlib:emit_build_bazel.c)",
    "$(location //src/findlib:emit_jsoo.c)",
    "$(location //src/findlib:emit_ocaml_repo.c)",
    "$(location //src/findlib:emit_pkg_bindir.c)",
    "$(location //src/findlib:handlers_findlib.c)",
    "$(location //src/findlib:meta_parser.c)",
    "$(location //src/findlib:meta_entries.c)",
    "$(location //src/findlib:meta_flags.c)",
    "$(location //src/findlib:meta_lexis.c)",
    "$(location //src/findlib:meta_packages.c)",
    "$(location //src/findlib:meta_properties.c)",
    "$(location //src/findlib:meta_settings.c)",
    "$(location //src/findlib:meta_values.c)",
    "$(location //src/findlib:meta_syntaxis.c)",

    "$(location //src/opam:opam_lexer.c)",
    "$(location //src/opam:opam_lexis.c)",
    "$(location //src/opam:opam_parser.c)",
    "$(location //src/opam:opam_syntaxis.c)",
    "$(location //src/opam:opam_package.c):",

    # "$(location //convert:convert.c)",
    "$(location //coswitch:coswitch.c)",

    "$(location //src/xdg:xdg.c)",

    ## FIXME: select on //:compilation_mode: dbg?
    "$(location //src:debug.c)",
    "$(location //src:debug_bazel.c)",
    # "$(location //src:debug_mibl.c)",
    "$(location //src:debug_s7.c)",
    "$(location //src/findlib:debug_findlib.c)",
    "$(location //src/findlib:debug_meta.c)",
]

# Note the trailing ':', we do not need to emit headers for these.
LINUX_FILELOCS = " " + select({
    "//bzl/host:linux": " ".join(["$(location //src/linux:strlcat.c):",
                                  "$(location //src/linux:strlcpy.c):",
                                  "$(location //src/linux:strnstr.c):"]),
    "//conditions:default": ""
})

CP_CMDS = " ".join([
    "cp $${SRCDIR0}/*.h $(@D);",
    "cp $${SRCDIR1}/*.h $(@D);",
    "cp $${SRCDIR2}/*.h $(@D);",
    "cp $${SRCDIR3}/*.h $(@D);",
    "cp $${SRCDIR4}/*.h $(@D);",
    # "cp $${SRCDIR5}/*.h $(@D);",
    "cp $${SRCDIR6}/*.h $(@D);",
    "cp $${SRCDIR7}/*.h $(@D);",
    "cp $${SRCDIR8}/*.h $(@D);",
    "cp $${SRCDIR9}/*.h $(@D);",
])

genrule(
    name = "hdrs",
    srcs = [
        "//src:ansi_colors.h",
        "//src:globals.c",
        "//src:config_bazel.c",
        "//src:config_mibl.c",
        "//src:config_opam.c",
        "//src:config_s7.c",
        "//src:mibl_s7.c",

        "//src:deps.c",
        "//src:cmd_runner.c",

        "//src:error_handler_opam.c",
        "//src:error_handler_dune.c",
        "//src:handlers.c",
        "//src:handlers_opam.c",

        "//src:load_project.c",
        "//src/coswitch:coswitch_cleaner.c",
        "//src/coswitch:opam_switch_converter.c",   # FIXME: rename
        "//src:treewalker_project.c", # FIXME: rename
        "//src:utils.c",

        # "//src:log.c",
        # "//src:log.h",
        # "//src:utarray.c",
        # "//src:utarray.h",
        # "//src:uthash.h",
        # "//src:utstring.c",

        # "//src/dune:mkhdrs_srcs",
        "//src/dune:dune_readers.c",

        "//src/findlib:emit_build_bazel.c",
        "//src/findlib:emit_jsoo.c",
        "//src/findlib:emit_ocaml_repo.c",
        "//src/findlib:emit_pkg_bindir.c",
        "//src/findlib:handlers_findlib.c",
        "//src/findlib:meta_parser.c",
        "//src/findlib:meta_entries.c",
        "//src/findlib:meta_flags.c",
        "//src/findlib:meta_packages.c",
        "//src/findlib:meta_properties.c",
        "//src/findlib:meta_settings.c",
        "//src/findlib:meta_values.c",

        "//src/findlib:meta_lexis.c",
        "//src/findlib:meta_syntaxis.c", # //src/findlib/gen_meta_syntaxis

        "//src/opam:opam_lexer.c",
        "//src/opam:opam_lexis.c",
        "//src/opam:opam_parser.c",
        "//src/opam:opam_syntaxis.c",
        "//src/opam:opam_package.c",

        "//src/xdg:xdg.c",

        ## runners
        # "//convert:convert.c",
        "//coswitch:coswitch.c",

        ## FIXME: select on //:compilation_mode: dbg?
        "//src:debug.c",
        "//src:debug_bazel.c",
        # "//src:debug_mibl.c",
        "//src:debug_s7.c",
        "//src/findlib:debug_findlib.c",
        "//src/findlib:debug_meta.c",

    ] + select({
        "//bzl/host:linux": ["//src/linux:strlcat.c",
                             "//src/linux:strlcpy.c",
                             "//src/linux:strnstr.c"],
        "//conditions:default":   []
    }),
    outs = [
        "globals.h",
        "config_bazel.h",
        "config_mibl.h",
        "config_opam.h",
        "config_s7.h",
        "mibl_s7.h",
        "deps.h",
        "cmd_runner.h",

        "dune_readers.h",

        ## FIXME: select on //:compilation_mode: dbg?
        "debug.h",
        "debug_bazel.h",
        # "debug_mibl.h",
        "debug_s7.h",
        "debug_findlib.h",
        "debug_meta.h",

        "coswitch_cleaner.h",
        "opam_switch_converter.h",
        "treewalker_project.h",
        "handlers.h",
        "handlers_findlib.h",
        "handlers_opam.h",

        "emit_build_bazel.h",
        "emit_jsoo.h",
        "emit_ocaml_repo.h",
        "emit_pkg_bindir.h",
        "meta_parser.h",
        "meta_entries.h",
        "meta_flags.h",
        "meta_lexis.h",
        "meta_packages.h",
        "meta_properties.h",
        "meta_settings.h",
        "meta_values.h",
        "meta_syntaxis.h",

        "opam_lexer.h",
        "opam_lexis.h",
        "opam_parser.h",
        "opam_syntaxis.h",


        "load_project.h",
        "error_handler_dune.h",
        "error_handler_opam.h",

        "utils.h",
        # "utstring.h",

        "xdg.h",

        # "convert.h",
        "coswitch.h"
    ],
    cmd = " ".join(DIRLOCS) +
    " ".join(FILELOCS) + LINUX_FILELOCS + ";"
    + CP_CMDS,
    tools = ["//vendored/makeheaders"],
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "export",
    srcs = [
        "//src:ansi_colors.h",
        "//src:globals.c",
        "//src:config_bazel.c",
        "//src:config_mibl.c",
        "//src:config_opam.c",
        "//src:config_s7.c",
        "//src:mibl_s7.c",

        "//src:deps.c",
        "//src:cmd_runner.c",

        "//src:debug.c",
        "//src:debug_bazel.c",
        # "//src:debug_mibl.c",
        "//src:debug_s7.c",
        "//src/findlib:debug_findlib.c",
        "//src/findlib:debug_meta.c",

        "//src:error_handler_opam.c",
        "//src:error_handler_dune.c",
        "//src:handlers.c",
        "//src:handlers_opam.c",

        "//src:load_project.c",
        "//src/coswitch:coswitch_cleaner.c",
        "//src/coswitch:opam_switch_converter.c",
        "//src:treewalker_project.c",
        "//src:utils.c",

        # "//src:log.c",
        # "//src:log.h",
        # "//src:utarray.c",
        # "//src:utarray.h",
        # "//src:uthash.h",
        # "//src:utstring.c",

        # "//src/dune:mkhdrs_srcs",
        "//src/dune:dune_readers.c",

        "//src/findlib:emit_build_bazel.c",
        "//src/findlib:emit_jsoo.c",
        "//src/findlib:emit_ocaml_repo.c",
        "//src/findlib:emit_pkg_bindir.c",
        "//src/findlib:handlers_findlib.c",
        "//src/findlib:meta_parser.c",
        "//src/findlib:meta_entries.c",
        "//src/findlib:meta_flags.c",
        "//src/findlib:meta_packages.c",
        "//src/findlib:meta_properties.c",
        "//src/findlib:meta_settings.c",
        "//src/findlib:meta_values.c",

        "//src/findlib:meta_lexis.c",
        "//src/findlib:meta_syntaxis.c", # //src/findlib/gen_meta_syntaxis

        "//src/xdg:xdg.c",

        "//coswitch:coswitch.c"
    ] + select({
        "//bzl/host:linux": ["//src/linux:strlcat.c",
                             "//src/linux:strlcpy.c",
                             "//src/linux:strnstr.c"],
        "//conditions:default":   []
    }),
    outs = ["libmibl.h"],
    # we need to enumerate rather than use $(SRCS) or a wildcard
    # since for for a few srcfiles we do not want to emit a hdr;
    # for those we use the suffixed colon notation e.g. 'foo.c:'.
    cmd = " ".join([
        # "SRC0=$(location //coswitch:coswitch.c);",
        # "SRCDIR0=`dirname $$SRC0`;",
        # "SRC1=$(location //src:ansi_colors.h);",
        # "SRCDIR1=`dirname $$SRC1`;",
        # "SRC2=$(location //src/dune:dune_readers.c);",
        # "SRCDIR2=`dirname $$SRC2`;",
        # "SRC3=$(location //src/findlib:meta_packages.c);",
        # "SRCDIR3=`dirname $$SRC3`;",
        # ## meta_syntaxis.c is generated so needs special treatment
        # "SRC4=$(location //src/findlib:meta_syntaxis.c);",
        # "SRCDIR4=`dirname $$SRC4`;",

        "$(location //vendored/makeheaders)",
        "-H",
        "$(location //src:ansi_colors.h)",
        "$(location //src:globals.c)",
        "$(location //src:config_bazel.c)",
        "$(location //src:config_mibl.c)",
        "$(location //src:config_opam.c)",
        "$(location //src:config_s7.c)",
        "$(location //src:mibl_s7.c)",

        "$(location //src:deps.c)",
        "$(location //src:cmd_runner.c)",

        ## FIXME: select on //:compilation_mode: dbg?
        "$(location //src:debug.c)",
        "$(location //src:debug_bazel.c)",
        # "$(location //src:debug_mibl.c)",
        "$(location //src:debug_s7.c)",
        "$(location //src/findlib:debug_findlib.c)",
        "$(location //src/findlib:debug_meta.c)",

        "$(location //src:error_handler_opam.c)",
        "$(location //src:error_handler_dune.c)",
        "$(location //src:handlers.c)",
        "$(location //src:handlers_opam.c)",

        "$(location //src:load_project.c)",

        "$(location //src/coswitch:coswitch_cleaner.c)",
        "$(location //src/coswitch:opam_switch_converter.c)",
        "$(location //src:treewalker_project.c)",
        "$(location //src:utils.c)",

        # "$(location //src:log.c):", # do not emit header
        # "$(location //src:log.h)",
        # "$(location //src:utarray.c):",  # do not emit header
        # "$(location //src:utarray.h)",
        # "$(location //src:uthash.h)",
        # "$(location //src:utstring.c)",

        "$(location //src/dune:dune_readers.c)",

        # "$(location //src/linux:strlcat.c)",
        # "$(location //src/linux:strlcpy.c)",
        # "$(location //src/linux:strnstr.c)",

        "$(location //src/findlib:emit_build_bazel.c)",
        "$(location //src/findlib:emit_jsoo.c)",
        "$(location //src/findlib:emit_ocaml_repo.c)",
        "$(location //src/findlib:emit_pkg_bindir.c)",
        "$(location //src/findlib:handlers_findlib.c)",
        "$(location //src/findlib:meta_parser.c)",
        "$(location //src/findlib:meta_entries.c)",
        "$(location //src/findlib:meta_flags.c)",
        "$(location //src/findlib:meta_lexis.c)",
        "$(location //src/findlib:meta_packages.c)",
        "$(location //src/findlib:meta_properties.c)",
        "$(location //src/findlib:meta_settings.c)",
        "$(location //src/findlib:meta_values.c)",
        "$(location //src/findlib:meta_syntaxis.c)",
        "$(location //src/xdg:xdg.c)",

        "$(location //coswitch:coswitch.c)",
        ">",
        "$@"
        # ";",

        # "cp $${SRCDIR0}/*.h $(@D);",
        # "cp $${SRCDIR1}/*.h $(@D);",
        # "cp $${SRCDIR2}/*.h $(@D);",
        # "cp $${SRCDIR3}/*.h $(@D);",
        # "cp $${SRCDIR4}/*.h $(@D);",
    ]),
    tools = ["//vendored/makeheaders"],
    visibility = ["//visibility:public"]
)

