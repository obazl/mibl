load("@rules_cc//cc:defs.bzl", "cc_library")

##########
cc_library(
    name  = "mibl",
    # alwayslink = True,
    # linkstatic = 1,
    srcs  = [
        "load_dune.c",
        "opam_config.c", "opam_config.h",
        "bazel_config.c",
        "s7_config.c", "s7_config.h",
        "mibl_config.c", "mibl_config.h",
        "error_handler.c", "error_handler.h",
        "fs.c", "fs.h",
        "utils.c", "utils.h",
        "@uthash//:include",
    ],
    hdrs = [
        "load_dune.h",
        "bazel_config.h",
        "mibl_config.h",
        "ansi_colors.h",
        "fs.h",
        "@libs7//src:s7.h",
        "@uthash//:include",
    ],
    data = [
        "//mibl:dune.scm",
        "//mibl/dune:srcs",
        "//mibl:meta.scm",
        "//mibl/meta:srcs",
        "//mibl:opam.scm",
        "//mibl/opam:srcs",
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }) + select({
        "//bzl/host:linux": [
            "_XOPEN_SOURCE=500", # strdup
            "_DEFAULT_SOURCE"    # dirent DT_* macros
        ],
        "//conditions:default":   []
    }),
    copts = [
        "-std=c11",
        "-g",
        "-Wall",
        "-Wno-unused-function",

        "-I$(GENDIR)/src",
        "-I$(GENDIR)/external/mibl/src",

        "-Iexternal/libs7/src",

        "-Iexternal/libinih",
        "-Iexternal/logc/src",
        "-Iexternal/uthash/include",
    ],
    deps = [
        "//external/libinih:inih",
        "@logc//:logc",
        "@libs7//src:s7",
        "@libs7//vendored/linenoise",
    ],
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "mkhdrs",
    srcs = [
        "load_dune.c",
        "opam_config.c",
        "bazel_config.c",
        "mibl_config.c",
        "s7_config.c",
        "error_handler.c",
        "fs.c",
        "utils.c",

        "ansi_colors.h",
        # "@uthash//:include",
   ],
    outs = [
        "load_dune.h",
        "opam_config.h",
        "bazel_config.h",
        "mibl_config.h",
        "s7_config.h",
        "error_handler.h",
        "fs.h",
        "utils.h",
    ],
    cmd = "\n".join([
        "SRC1=$(location load_dune.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location @makeheaders//:makeheaders) \\",
        "    $(location load_dune.c) \\",
        "    $(location opam_config.c) \\",
        "    $(location mibl_config.c) \\",
        "    $(location s7_config.c) \\",
        "    $(location bazel_config.c) \\",
        "    $(location error_handler.c) \\",
        "    $(location fs.c) \\",
        "    $(location utils.c) \\",
        "    $(location ansi_colors.h)",
        # "    $(locations @uthash//:include)",
        "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = ["@makeheaders//:makeheaders"],
    visibility = ["//visibility:public"]
)

########
# genrule(
#     name = "mkhdrs-export",
#     srcs = [
#         "cmd_runner.c",
#         # "codept.c",
#         # "codept_emit.c",
#         # "codept_parser.c",
#         "opam_config.c",
#         # "fs.c",
#         # "utils.c",
#         "@uthash//:include",
#     ],
#     outs = [
#         "camlark.h",
#     ],
#     cmd = "\n".join([
#         "SRC1=$(location opam_config.c)",
#         "SRCDIR1=`dirname $$SRC1`",
#         "$(location @makeheaders//:makeheaders) -H \\",
#         "    $(locations @uthash//:include) \\",
#         "    $(location cmd_runner.c) \\",
#         # "    $(location codept.c) \\",
#         # "    $(location codept_emit.c) \\",
#         # "    $(location codept_parser.c) \\",
#         "    $(location opam_config.c) \\",
#         # "    $(location fs.c) \\",
#         # "    $(location utils.c) \\",
#         "    > $@",
#     ]),
#     tools = ["@makeheaders//:makeheaders"],
#     visibility = ["//visibility:public"]
# )
