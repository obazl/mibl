exports_files(glob(["*.c", "*.h"]))
#     "log.c", "log.h",
#     "utarray.h", "utarray.c",
#     "uthash.h", "utstring.h",
#     "ansi_colors.h",
#     "utils.c"
# ])

COPTS = [
    "-x", "c",
    "-std=c11",
    "-pedantic-errors",
] + select({
    "//bzl/host:linux": [
        "-D_POSIX_C_SOURCE=200809L", ## strdup, strndup, waitpid, etc.
        "-D_DEFAULT_SOURCE"],        ## DT_ constants from dirent.h
    "//conditions:default":   []
})

config_setting(name = "linux",
               constraint_values = ["@platforms//os:linux"])

config_setting(name = "macos",
               constraint_values = ["@platforms//os:macos"])

filegroup(
    name = "mkhdrs_srcs",
    srcs = glob(
        ["*.c"],
        exclude = ["log.c", "utarray.c"]
    ),
    visibility = ["//visibility:public"]
)

# filegroup(
#     name = "mkhdrs_xsrcs",
#     srcs = ["log.c", "utarray.c"],
#     visibility = ["//visibility:public"]
# )

filegroup(
    name = "mkhdrs_hdrs",
    srcs = glob(
        ["*.h"]
    ),
    visibility = ["//visibility:public"]
)

MIBL_SRCS = [
    "load_dune.c",
    "globals.c",
    "config_bazel.c",
    "config_mibl.c",
    "config_opam.c",
    "config_s7_dune.c",
    "error_handler_dune.c",
    # "fs.c",
    # "log.c", "log.h",
    "utils.c",
]

##########
cc_library(
    name  = "mibl",
    srcs = MIBL_SRCS + [
        "//src/hdrs:load_dune.h",
        "//src/hdrs:globals.h",
        "//src/hdrs:config_bazel.h",
        "//src/hdrs:config_mibl.h",
        "//src/hdrs:config_opam.h",
        "//src/hdrs:config_s7_dune.h",
        "//src/hdrs:error_handler_dune.h",
        # "fs.h",
        "//src/hdrs:utils.h",

        # "utarray.c",
        # "//vendored/uthash:utarray.h",
        # "utstring.c",
        # "//vendored/uthash:utstring.h",
        "@libs7//src:s7",
    ] + select({
        "//bzl/host:linux": [
            "//src/linux:strlcat.c",
            "//src/linux:strlcpy.c",
            "//src/linux:strnstr.c"
        ],
        "//conditions:default":   []
    }) + select({
        "//compilation_mode:dbg?": [
            "debug_s7.c",
            "//src/hdrs:debug_s7.h"
        ],
        "//conditions:default": []
    }),

    # }) + select({
    #     "//compilation_mode:dbg?": [
    #         "debug.c", "debug.h",
    #         "debug_mibl.c", "debug_mibl.h",
    #         "debug_s7.c", "debug_s7.h"
    #     ],
    #     "//conditions:default": []
    # }) + [
    #     # "log.c",
    #     # "uthash.h", "utarray.h", "utstring.h"
    #     # "@uthash//:include"
    # ],
    hdrs = ["//src/hdrs:libmibl.h"], ## "log.h"],
    data = [
        "//mibl:srcs",
        "//mibl/dune:srcs",
        "//mibl/meta:srcs",
        "//mibl/opam:srcs"
    ],
    # data = [
    #     "//mibl:dune.scm",
    #     "//mibl/dune:srcs",
    #     "//mibl:meta.scm",
    #     "//mibl/meta:srcs",
    #     "//mibl:opam.scm",
    #     "//mibl/opam:srcs",
    # ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE", "DEBUG_MIBL"],
        "//conditions:default":   []
    }) + select({
        "//bzl/host:linux": [
            "_XOPEN_SOURCE=500", # strdup
            "_DEFAULT_SOURCE"    # dirent DT_* macros
        ],
        "//conditions:default":   []
    }),
    copts = COPTS + [
        "-Wall",
        "-Wpedantic",
        "-Wno-unused-function",

        "-Isrc",
        "-Iexternal/src",
        "-Iexternal/mibl/src",

        "-I$(GENDIR)/src",
        "-I$(GENDIR)/external/mibl/src",

        "-I$(GENDIR)/src/hdrs",
        "-I$(GENDIR)/external/mibl/src/hdrs",

        "-Iexternal/libs7/src",

        "-Ivendored/libinih",
        "-Iexternal/mibl/vendored/libinih",

        "-Ivendored/logc",
        "-Iexternal/mibl/vendored/logc",

        "-Ivendored/uthash",
        "-Iexternal/mibl/vendored/uthash",
    ],
    alwayslink = False, # True,
    linkstatic = True,
    # linkopts = [
    #     "-ls7",
    # ],
    deps = [
        "//vendored/libinih:inih",
        "//vendored/logc",
        "//vendored/uthash",
        "@libs7//src:s7",
        "@libs7//vendored/linenoise",
    ] + select({
        # sigh. fixme: s7 v. non-s7 :debug target
        "//compilation_mode:dbg?": [":debug"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

################################################################
CMD_HDR = "\n".join([
    "SRC1=$(location load_dune.c)",
    "SRCDIR1=`dirname $$SRC1`;",
])

cc_binary(
    name  = "makeheaders",
    srcs  = ["makeheaders.c"],
    copts = ["-O3"] + select({
        "linux": ["-Wno-stringop-truncation",
                  "-Wno-stringop-overflow"],
        "//conditions:default": []
    }),
    linkstatic=1,
    visibility = ["//visibility:public"]
)

########
# genrule(
#     name = "mkhdrs",
#     srcs = MIBL_SRCS + [
#         "ansi_colors.h",
#         "utarray.c",
#         "utarray.h",
#         "uthash.h",
#         "utstring.h",
#         "debug_s7.c"
#     ],
#     outs = [
#         "load_dune.h",
#         "config_s7_dune.h",
#         "error_handler_dune.h",
#     ],
#     cmd = " ".join([
#         "SRC1=$(location load_dune.c);",
#         "SRCDIR1=`dirname $$SRC1`;",
#         "$(location :makeheaders)",
#         "$(location load_dune.c)",
#         "$(location config_s7_dune.c)",
#         "$(location error_handler_dune.c)",
#         # do not emit headers:
#         "$(location debug_s7.c):",
#         "$(location globals.c):",
#         "$(location config_bazel.c):",
#         "$(location config_mibl.c):",
#         "$(location config_opam.c):",
#         "$(location ansi_colors.h)",
#         "$(location log.c):",
#         "$(location log.h)",
#         "$(location utarray.c):",
#         "$(location utarray.h)",
#         "$(location uthash.h)",
#         "$(location utstring.h)",
#         "$(location utils.c): ;",

#         "cp $${SRCDIR1}/*.h $(@D)",
#     ]),
#     tools = [":makeheaders"],
#     visibility = ["//visibility:public"]
# )

# ########
# genrule(
#     name = "mkhdrs-export",
#     srcs = MIBL_SRCS + [
#         "ansi_colors.h",
#         "uthash.h", "utarray.h", "utstring.h"
#     ],
#     outs = ["mibl.h"],
#     cmd = CMD_HDR
#     + "$(location :makeheaders) -H "
#     + "$(SRCS)"
#     + " > $@",
#     tools = [":makeheaders"],
#     visibility = ["//visibility:public"]
# )

config_setting(
    name = "dbg_mode",
    values = {"compilation_mode": "dbg"},
)

################################################################
####    OPAM Converter
################################################################
cc_library(
    name = "opam_switch_converter",
    srcs = [
        "opam_switch_converter.c",
        "//src/hdrs:opam_switch_converter.h",

        "handlers.c",
        "//src/hdrs:handlers.h",

        # "handlers_findlib.c",
        "//src/hdrs:handlers_findlib.h",

        "handlers_opam.c",
        "//src/hdrs:handlers_opam.h",

        "globals.c", "//src/hdrs:globals.h",
        "config_bazel.c", "//src/hdrs:config_bazel.h",
        "config_mibl.c", "//src/hdrs:config_mibl.h",
        "config_opam.c", "//src/hdrs:config_opam.h",
        "config_s7.c", "//src/hdrs:config_s7.h",
        "error_handler_opam.c", "//src/hdrs:error_handler_opam.h",
        "utils.c", "//src/hdrs:utils.h",
        # "log.c",
        # "log.h",
        # "//src:utarray.h",
        # "//src:uthash.h",
        # "//vendored/uthash:utstring.h",
    ] + select({
        "//bzl/host:linux": [
            "//src/linux:strlcat.c", "//src/linux:strlcpy.c", "//src/linux:strnstr.c"],
        "//conditions:default":   []
    }),
    hdrs = [
        # "libopam_switch_converter.h",
        # "@libs7//src:s7.h",
        # "log.h",
    ],
    copts = COPTS + [
        "-Isrc",
        "-I$(GENDIR)/src",
        "-Iexternal/mibl/src",
        "-I$(GENDIR)/external/mibl/src",

        "-I$(GENDIR)/src/hdrs",
        "-I$(GENDIR)/external/mibl/src/hdrs",

        "-I$(GENDIR)/src/dune",
        "-I$(GENDIR)/external/mibl/src/dune",

        "-I$(GENDIR)/src/findlib",
        "-I$(GENDIR)/external/mibl/src/findlib",

        "-Iexternal/libs7/src",
        # "-Iexternal/libinih",

        "-Ivendored/libinih",
        "-Iexternal/mibl/vendored/libinih",

        "-Ivendored/logc",
        "-Iexternal/mibl/vendored/logc",

        "-Ivendored/uthash",
        "-Iexternal/mibl/vendored/uthash"
    ],
    defines = select({
        "//compilation_mode:dbg?": ["DEBUG_TRACE", "DEBUG_MIBL"],
        "//conditions:default":   []
    }),
    deps = [
        "//src/dune",
        "//src/findlib",
        # "//src:mibl",
        "@libs7//src:s7",
        "//vendored/libinih:inih",
        "//vendored/logc",
        "//vendored/uthash",
    ] + select({
        "//compilation_mode:dbg?": [":debug"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

################
cc_library(
    name = "treewalker_project",
    srcs = [
        "treewalker_project.c" , "//src/hdrs:treewalker_project.h",
        # "handlers_findlib.c" , "//src/hdrs:handlers_findlib.h",
        "handlers_opam.c"      , "//src/hdrs:handlers_opam.h",
        "globals.c"            , "//src/hdrs:globals.h",
        "config_bazel.c"       , "//src/hdrs:config_bazel.h",
        "config_mibl.c"        , "//src/hdrs:config_mibl.h",
        "config_opam.c"        , "//src/hdrs:config_opam.h",
        "config_s7.c"          , "//src/hdrs:config_s7.h",
        "config_s7_dune.c"     , "//src/hdrs:config_s7_dune.h",
        "error_handler_opam.c" , "//src/hdrs:error_handler_opam.h",

        "utils.c",
        "//src/hdrs:utils.h",
        # "log.c",
        # "//vendored/uthash::log.h",
        # "//vendored/uthash::utarray.h",
        # "//vendored/uthash:::uthash.h",
        # "//vendored/uthash:utstring.h",
    ] + select({
        "//bzl/host:linux": [
            "//src/linux:strlcat.c", "//src/linux:strlcpy.c", "//src/linux:strnstr.c"],
        "//conditions:default":   []
    }),
    hdrs = [
        # "libopam_switch_converter.h",
        # "@libs7//src:s7.h",
        # "log.h",
    ],
    copts = COPTS + [
        "-Isrc",
        "-I$(GENDIR)/src",
        "-Iexternal/mibl/src",
        "-I$(GENDIR)/external/mibl/src",

        "-I$(GENDIR)/src/hdrs",
        "-I$(GENDIR)/external/mibl/src/hdrs",

        "-I$(GENDIR)/src/dune",
        "-I$(GENDIR)/external/mibl/src/dune",

        "-I$(GENDIR)/src/findlib",
        "-I$(GENDIR)/external/mibl/src/findlib",

        "-Iexternal/libs7/src",

        "-Ivendored/libinih",
        "-Iexternal/mibl/vendored/libinih",

        "-Ivendored/logc",
        "-Iexternal/mibl/vendored/logc",

        "-Ivendored/uthash",
        "-Iexternal/miblvendored/uthash"
    ],
    defines = select({
        "//compilation_mode:dbg?": ["DEBUG_TRACE", "DEBUG_MIBL"],
        "//conditions:default":   []
    }),
    deps = [
        "//src/dune",
        "//src/findlib",
        # "//src:mibl",
        "//vendored/libinih:inih",
        "//vendored/logc",
        "//vendored/uthash",
        "@libs7//src:s7",
    ] + select({
        "//compilation_mode:dbg?": [":debug"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

################################################################
cc_library(
    name = "debug",
    srcs = [
        "debug.c",
        "//src/hdrs:debug.h",
        "debug_findlib.c",
        "//src/hdrs:debug_findlib.h",
        "debug_mibl.c",
        "//src/hdrs:debug_mibl.h",
        # "debug_opam.c",
        # "debug_opam.h",
        # "//src:utils.c",
        # "//src:utils.h",
        "log.c",
        "log.h",
        "//vendored/uthash:utarray.h",
        # "//src:uthash.h",
        # "//src:utstring.h",
    ] + select({
        "//bzl/host:linux": [
            "//src/linux:strlcat.c",
            "//src/linux:strlcpy.c",
            "//src/linux:strnstr.c"
        ],
        "//conditions:default":   []
    }),
    hdrs = [
        # "libdebug.h",
    ],
    copts = COPTS + [
        "-Isrc",
        "-I$(GENDIR)/src",
        "-I$(GENDIR)/src/findlib",

        "-I$(GENDIR)/src/hdrs",
        "-I$(GENDIR)/external/mibl/src/hdrs",

        "-Iexternal/mibl/src",
        "-I$(GENDIR)/external/mibl/src",

        "-I$(GENDIR)/external/mibl/src/findlib",

        "-Iexternal/libs7/src",
        # "-Iexternal/libinih",
    ],
    defines = select({
        "//compilation_mode:dbg?": ["DEBUG_TRACE", "DEBUG_MIBL"],
        "//conditions:default":   []
    }),
    # deps = [
    #     "//src/findlib",
    #     # "//src:mibl",
    #     # "@libs7//src:s7",
    #     "//external/libinih:inih",
    # ],
    visibility = ["//visibility:public"]
)
