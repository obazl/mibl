# load("@rules_cc//cc:defs.bzl", "cc_library")

exports_files([
    "log.c", "log.h",
    "utarray.h", "uthash.h", "utstring.h"
])

load(":BUILD.bzl", "SRCS", "mkhdr_srcs")

SRCS = [
    "load_dune.c",
    "config.c",
    "config_bazel.c",
    "config_mibl.c",
    "config_opam.c",
    "config_s7.c",
    "error_handler.c",
    "fs.c",
    "utils.c",

    # "treewalker.c",
    # "handlers.c"
    # "debug.c"
]

HDRS = [
    "load_dune.h",
    # "config_bazel.h",
    # "config_mibl.h",
    # "config.h",
    "config_opam.h",
    "config_s7.h",
    "error_handler.h",
    "fs.h",
    # "utils.h",

    # "treewalker.h",
    # "handlers.h"
    # "debug.h"
]

##########
cc_library(
    name  = "mibl",
    alwayslink = True,
    # linkstatic = 1,
    srcs = SRCS + HDRS + select({
        "//bzl/host:linux": ["strlcat.c", "strlcpy.c", "strnstr.c"],
        "//conditions:default":   []
    }) + select({
        "//compilation_mode:dbg?": [
            "debug.c", "debug.h",
            "debug_mibl.c", "debug_mibl.h"
        ],
        "//conditions:default": []
    }) + [
        "log.c",
        # "uthash.h", "utarray.h", "utstring.h"
        "@uthash//:include"
    ],
    hdrs = ["mibl.h", "log.h"],
    data = [
        "//mibl:srcs",
        "//mibl/dune:srcs",
        "//mibl/meta:srcs",
        "//mibl/opam:srcs"
    ],
    # data = [
    #     "//mibl:dune.scm",
    #     "//mibl/dune:srcs",
    #     "//mibl:meta.scm",
    #     "//mibl/meta:srcs",
    #     "//mibl:opam.scm",
    #     "//mibl/opam:srcs",
    # ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE", "DEBUG_MIBL"],
        "//conditions:default":   []
    }) + select({
        "//bzl/host:linux": [
            "_XOPEN_SOURCE=500", # strdup
            "_DEFAULT_SOURCE"    # dirent DT_* macros
        ],
        "//conditions:default":   []
    }),
    copts = [
        "-std=c11",
        "-g",
        "-Wall",
        "-Wpedantic",
        "-Wno-unused-function",

        "-Isrc",
        "-Iexternal/src",
        "-Iexternal/mibl/src",

        "-I$(GENDIR)/src",
        "-I$(GENDIR)/external/mibl/src",

        "-Iexternal/libs7/src",

        "-Iexternal/libinih",
        # "-Iexternal/logc/src",
        "-Iexternal/uthash/include",
    ],
    deps = [
        "//external/libinih:inih",
        "@libs7//src:s7",
        "@libs7//vendored/linenoise",
    ],
    visibility = ["//visibility:public"]
)

################################################################
CMD_HDR = "\n".join([
    "SRC1=$(location load_dune.c)",
    "SRCDIR1=`dirname $$SRC1`;",
])

cc_binary(
    name  = "makeheaders",
    srcs  = ["makeheaders.c"],
    copts = ["-O3"],
    linkstatic=1,
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "mkhdrs",
    srcs = SRCS + ["ansi_colors.h"],
    outs = HDRS,
    cmd = CMD_HDR + "$(location :makeheaders) "
    + "$(SRCS); cp $${SRCDIR1}/*.h $(@D)",
    tools = [":makeheaders"],
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "mkhdrs-export",
    srcs = SRCS + [
        "ansi_colors.h",
        "uthash.h", "utarray.h", "utstring.h"
    ],
    outs = ["mibl.h"],
    cmd = CMD_HDR
    + "$(location :makeheaders) -H "
    + "$(SRCS)"
    # + mkhdr_srcs()
    + " > $@",
    tools = [":makeheaders"],
    visibility = ["//visibility:public"]
)

config_setting(
    name = "dbg_mode",
    values = {"compilation_mode": "dbg"},
)

################################################################
####    OPAM Loader
################################################################
cc_library(
    name = "treewalker",
    srcs = [
        "treewalker.c",
        "treewalker.h",
        "handlers.c",
        "handlers.h",
        "//src:config.c",
        "//src:config.h",
        "//src:config_bazel.c",
        "//src:config_bazel.h",
        "//src:config_mibl.c",
        "//src:config_mibl.h",
        "//src:utils.c",
        "//src:utils.h",
        "//src:log.c",
        "//src:log.h",
        "//src:utarray.h",
        "//src:uthash.h",
        "//src:utstring.h",
    ] + select({
        "//bzl/host:linux": ["strlcat.c", "strlcpy.c", "strnstr.c"],
        "//conditions:default":   []
    }) + select({
        "//compilation_mode:dbg?": [
            "debug.c", "debug.h",
            "debug_mibl.c", "debug_mibl.h"
        ],
        "//conditions:default": []
    }),
    hdrs = [
        "libtreewalker.h",
    ],
    copts = [
        "-Isrc",
        "-I$(GENDIR)/src",
        "-Iexternal/libs7/src",
        "-Iexternal/libinih",
    ],
    defines = select({
        "//compilation_mode:dbg?": ["DEBUG_TRACE", "DEBUG_MIBL"],
        "//conditions:default":   []
    }),
    deps = [
        # "//src:mibl",
        # "@libs7//src:s7",
        "//external/libinih:inih",
    ],
    visibility = ["//visibility:public"]
)

genrule(
    name = "mkhdrs_treewalker",
    srcs = [
        "treewalker.c",
        "handlers.c",
        "//src:config.c",
        "//src:config_mibl.c",
        "//src:config_bazel.c",
        "//src:utils.c",
        "ansi_colors.h",
    ] + select({
        "//compilation_mode:dbg?": [
            "debug.c", "debug_mibl.c"],
        "//conditions:default": []
    }),
    outs = [
        "treewalker.h",
        "handlers.h",
        # "config_bazel.h",
        # "config_mibl.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location treewalker.c)",
        "SRCDIR1=`dirname $$SRC1`;",
        "$(location :makeheaders) \\",
        "$(SRCS);",
        "cp $${SRCDIR1}/*.h $(@D)",
        # "> $@"
    ]),
    tools = [":makeheaders"],
    visibility = ["//visibility:private"]
)

genrule(
    name = "mkhdrs_libtreewalker",
    srcs = [
        "treewalker.c",
        "handlers.c",
        "//src:config.c",
        "//src:config_mibl.c",
        "//src:config_bazel.c",
        "//src:utils.c",
        "ansi_colors.h",
    ] + select({
        "//compilation_mode:dbg?": [
            "debug.c", "debug_mibl.c"
        ],
        "//conditions:default": []
    }),
    outs = [
        "libtreewalker.h",
        # "handlers.h",
        # "config_bazel.h",
        # "config_mibl.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location treewalker.c)",
        "SRCDIR1=`dirname $$SRC1`;",
        "$(location :makeheaders) -H \\",
        "$(SRCS) \\",
        # "cp $${SRCDIR1}/*.h $(@D)",
        "> $@"
    ]),
    tools = [":makeheaders"],
    visibility = ["//visibility:private"]
)

genrule(
    name = "mkhdrs_config",
    srcs = [
        "config.c",
        "config_bazel.c",
        "config_mibl.c",
        "utils.c"
    ] + select({
        "//compilation_mode:dbg?": [
            "debug.c", "debug_mibl.c"],
        "//conditions:default": []
    }),
    outs = [
        "config.h",
        "config_bazel.h",
        "config_mibl.h",
        "utils.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location config_bazel.c)",
        "SRCDIR1=`dirname $$SRC1`;",
        "$(location :makeheaders) \\",
        "$(SRCS); \\",
        "cp $${SRCDIR1}/*.h $(@D)",
        # "> $@"
    ]),
    tools = [":makeheaders"],
    visibility = ["//visibility:private"]
)

genrule(
    name = "mkhdrs_debug",
    srcs = [
        "debug.c",
        "config_mibl.c",
        "debug_mibl.c",
    ],
    outs = [
        "debug.h",
        "debug_mibl.h",
    ],
    cmd = "\n".join([
        "SRC1=$(location debug.c)",
        "SRCDIR1=`dirname $$SRC1`;",
        "$(location :makeheaders) \\",
        "$(SRCS); \\",
        "cp $${SRCDIR1}/*.h $(@D)",
        # "> $@"
    ]),
    tools = [":makeheaders"],
    visibility = ["//visibility:private"]
)
