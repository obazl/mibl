load("//:BUILD.bzl",
     "LIBLOG_CC_VERSION",
     "LIBS7_VERSION",
     "MIBL_VERSION",
     "UTHASH_VERSION")

filegroup(
    name = "mkhdrs_srcs",
    srcs = glob(["*.c"]),
    visibility = ["//visibility:public"]
)

exports_files(glob(["*.c"]))

##########
cc_library(
    name  = "dune",
    # alwayslink = True,
    linkstatic = 1,
    srcs = [
        "dune_readers.c",
        "//src/hdrs:dune_readers.h",

        "error_handler_dune.c",
        "//src/hdrs:error_handler_dune.h",

        # "config.h",
        # "config_bazel.h",
        # "config_mibl.h",
        # "config_opam.h",
        # "config_s7.h",
        # "error_handler.h",
        # "utils.h"
        # "//src:log.c",
        # "//src:log.h",
        # "uthash.h", "utarray.h", "utstring.h"
        # "@uthash//:include"
        # "//src:utarray.c",
        # "//vendored/uthash:utarray.h",
        # "//vendored/uthash:utstring.h"
    ] + select({
        "//bzl/host:linux": [
            "//src/linux:strlcat.c", "//src/linux:strlcpy.c", "//src/linux:strnstr.c"],
        "//conditions:default":   []
    }),
    # hdrs = ["libdune.h"],
    deps = [
        "//dev",
        # "//external/libinih:inih",
        "@liblog_cc//src:logc",
        "@libs7//src:s7",
        # "@libs7//vendored/linenoise",
        "@uthash//src:uthash",
    ],
    copts = [
        "-std=c11",
        "-g",
        "-Wall",
        "-Wpedantic",
        "-Wno-unused-function",

        "-Idev",
        "-Iexternal/mibl~{}/dev".format(MIBL_VERSION),

        "-Isrc",
        "-I$(GENDIR)external/mibl~{}/src".format(MIBL_VERSION),
        # "-Iexternal/src",
        # "-Iexternal/mibl/src",

        "-I$(GENDIR)/src",
        "-I$(GENDIR)/external/mibl~{}/src/hdrs".format(MIBL_VERSION),
        # "-I$(GENDIR)/src/hdrs",

        # "-I$(GENDIR)/external/mibl/src",
        # "-I$(GENDIR)/external/mibl/src/hdrs",

        # "-Isrc/dune",
        # "-I$(GENDIR)/external/mibl~{}/dune".format(MIBL_VERSION),
        # "-Iexternal/src/dune",
        # "-Iexternal/mibl/src/dune",

        "-I$(GENDIR)/src/dune",
        "-I$(GENDIR)/external/mibl/src/dune",

        "-Iexternal/libs7~{}/src".format(LIBS7_VERSION),
        # "-Iexternal/libs7/src",

        # "-Iexternal/libinih",
        "-Iexternal/liblog_cc~{}/src".format(LIBLOG_CC_VERSION),
        "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),
    ],
    # ] + select({
    #     "//compilation_mode:dbg?": ["//src:debug"],
    #     "//conditions:default": []
    # }),
    local_defines = select({
        "//bzl/host:linux": [
            "_XOPEN_SOURCE=500", # strdup
            "_DEFAULT_SOURCE"    # dirent DT_* macros
        ],
        "//conditions:default":   []
    }) + select({
        "//config/debug:debug?": ["DEVBUILD", "DEBUG_MIBL"],
        "//conditions:default":   []
    }) + select({
        "//config/debug:trace?": ["TRACING"],
        "//conditions:default":   []
    }),
    visibility = ["//visibility:public"]
)

################################################################
########
# genrule(
#     name = "mkhdrs",
#     srcs = [
#         "//src:utarray.c",
#         "//src:utarray.h",
#         "//src:utstring.h",
#         "//src:log.c",
#         "//src:log.h",
#         "@libs7//src:s7.c",
#         "@libs7//src:s7.h",
#         "dune_readers.c", "//src:ansi_colors.h",
#     ],
#     outs = [
#         "dune_readers.h",
#         # "config_mibl.h",
#         # "config_opam.h",
#         # "config_s7.h",
#         # "error_handler.h",
#         # "fs.h",
#     ],
#     cmd = " ".join([
#         "SRC1=$(location dune_readers.c);",
#         "SRCDIR1=`dirname $$SRC1`;",
#         "$(location //src:makeheaders)",
#         "$(location //src:utarray.c):", ## do not emit header
#         "$(location //src:utarray.h)",
#         "$(location //src:utstring.h)",
#         "$(location //src:log.c):",
#         "$(location //src:log.h)",
#         "$(location @libs7//src:s7.c):",
#         "$(location @libs7//src:s7.h)",
#         "$(location dune_readers.c)",
#         "$(location //src:ansi_colors.h);",
#         "cp $${SRCDIR1}/*.h $(@D)"
#         # + "$(SRCS); cp $${SRCDIR1}/*.h $(@D)"
#     ]),
#     tools = ["//src:makeheaders"],
#     visibility = ["//visibility:public"]
# )

########
# genrule(
#     name = "mkhdrs-export",
#     srcs = [
#         "dune_readers.c",
#         "//src:utarray.c",
#         "//src:utarray.h",
#         "//src:utstring.h",
#         "//src:log.c",
#         "//src:log.h",
#         "@libs7//src:s7.c",
#         "@libs7//src:s7.h",
#         "//src:ansi_colors.h",
#         # "uthash.h", "utarray.h", "utstring.h"
#         # "@libs7//src:s7.h",
#     ],
#     outs= ["libdune.h"],
#     cmd = " ".join([
#         "$(location //src:makeheaders) -H",
#         # "$(SRCS)",
#         "$(location dune_readers.c)",
#         "$(location //src:utarray.c):", ## do not emit header
#         "$(location //src:utarray.h)",
#         "$(location //src:utstring.h)",
#         "$(location //src:log.c):", ## do not emit header
#         "$(location //src:log.h)",
#         "$(location @libs7//src:s7.c):", ## do not emit header
#         "$(location @libs7//src:s7.h)",
#         "$(location //src:ansi_colors.h)",
#         "> $@"
#     ]),
#     tools = ["//src:makeheaders"],
#     visibility = ["//visibility:public"]
# )
